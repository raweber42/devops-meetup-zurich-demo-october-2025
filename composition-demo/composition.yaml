apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: demo-composition
spec:
  compositeTypeRef:
    apiVersion: devopszurich.io/v1alpha1
    kind: xDatabase
  mode: Pipeline
  pipeline:
  - step: patch-and-transform
    functionRef:
      name: function-patch-and-transform
    input:
      apiVersion: pt.fn.crossplane.io/v1beta1
      kind: Resources
      resources:
      - name: database # StatefulSet running the database
        base:
          ################ START StatefulSet for Postgres Database ################
          apiVersion: apps/v1
          kind: StatefulSet
          spec:
            serviceName: database-service
            replicas: 1
            selector:
              matchLabels:
                app: postgres
            template:
              metadata:
                labels:
                  app: postgres
              spec:
                containers:
                - name: postgres
                  image: postgres:17
                  ports:
                  - containerPort: 5432
                  env:
                  - name: POSTGRES_DB
                    value: "devopsdb"  # hardcoded for now
                  - name: POSTGRES_USER
                    valueFrom:
                      secretKeyRef:
                        name: ""  # to be patched
                        key: username
                  - name: POSTGRES_PASSWORD
                    valueFrom:
                      secretKeyRef:
                        name: ""  # to be patched
                        key: password
                  volumeMounts:
                  - name: postgres-pvc
                    mountPath: /var/lib/postgresql/data
                  # Add resource requests/limits as needed
            volumeClaimTemplates:
            - metadata:
                name: postgres-pvc
              spec:
                accessModes:
                - ReadWriteOnce
                resources:
                  requests:
                    storage: 5Gi
          ################ END for Postgres Database ################
        patches:
        - type: FromCompositeFieldPath
          fromFieldPath: metadata.name
          toFieldPath: metadata.name
        - type: FromCompositeFieldPath
          fromFieldPath: metadata.namespace
          toFieldPath: metadata.namespace
        - type: FromCompositeFieldPath
          fromFieldPath: spec.databaseName
          toFieldPath: metadata.labels["database-abstraction"]
        - type: FromCompositeFieldPath
          fromFieldPath: spec.databaseName
          toFieldPath: spec.template.spec.containers[0].env[0].value
        - type: FromCompositeFieldPath
          fromFieldPath: metadata.name
          toFieldPath: spec.template.spec.containers[0].env[1].valueFrom.secretKeyRef.name
        - type: FromCompositeFieldPath
          fromFieldPath: metadata.name
          toFieldPath: spec.template.spec.containers[0].env[2].valueFrom.secretKeyRef.name
        # readinessChecks:
        # - matchCondition:
        #     type: Ready
        #     status: "True"
        #   type: MatchCondition

      - name: postgres-credentials
        base:
          ################ START for Postgres Credentials ################
          apiVersion: v1
          kind: Secret
          type: Opaque
          data:
            username: ZGV2b3BzdXNlcg==  # base64 for 'devopsuser'
            password: cGFzc3dvcmQ=      # base64 for 'password'
          ################ END for Postgres Credentials ################
        patches:
        - type: FromCompositeFieldPath
          fromFieldPath: metadata.name
          toFieldPath: metadata.name
        - type: FromCompositeFieldPath
          fromFieldPath: metadata.namespace
          toFieldPath: metadata.namespace
        readinessChecks:
        - type: None  # Secrets are considered ready immediately
  # - step: automatically-detect-ready-composed-resources
  #   functionRef:
  #     name: function-auto-ready
